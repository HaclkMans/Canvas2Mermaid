(()=>{"use strict";var e={197:e=>{e.exports=require("obsidian")},317:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ClipboardRepository=void 0,t.ClipboardRepository=class{constructor(){this.clipboardHistory=[]}async writeToClipboard(e){try{return navigator.clipboard&&window.ClipboardItem?await this.writeWithModernAPI(e):await this.writeWithLegacyAPI(e),this.clipboardHistory.push(e),this.clipboardHistory.length>10&&this.clipboardHistory.shift(),{success:!0}}catch(e){return{success:!1,message:`Clipboard write failed: ${e instanceof Error?e.message:String(e)}`}}}async readFromClipboard(){try{return navigator.clipboard&&window.ClipboardItem?await this.readWithModernAPI():await this.readWithLegacyAPI()}catch(e){throw e}}async clearClipboard(){try{return await navigator.clipboard.writeText(""),{success:!0}}catch(e){return{success:!1,message:`Failed to clear clipboard: ${e instanceof Error?e.message:String(e)}`}}}getClipboardHistory(){return[...this.clipboardHistory]}async writeWithModernAPI(e){await navigator.clipboard.writeText(e.text)}async writeWithLegacyAPI(e){const t=document.createElement("textarea");t.value=e.text,document.body.appendChild(t),t.select();try{document.execCommand("copy")}finally{document.body.removeChild(t)}}async readWithModernAPI(){return{text:await navigator.clipboard.readText(),format:"text"}}async readWithLegacyAPI(){const e=document.createElement("textarea");document.body.appendChild(e),e.focus();try{return document.execCommand("paste"),{text:e.value,format:"text"}}finally{document.body.removeChild(e)}}}},422:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ConvertCanvasToMermaidUseCase=void 0;const a=s(997);t.ConvertCanvasToMermaidUseCase=class{constructor(e,t){this.settings=e,this.canvasRepository=t}updateSettings(e){this.settings=e}async execute(e,t,s,a){const n=Date.now();try{if(!this.validateCanvasData(e))return{success:!1,error:"Canvas data is invalid or empty",statistics:{nodesCount:0,edgesCount:0,groupsCount:0,processingTime:Date.now()-n}};const s=this.generateMermaidFlowchart(e,a),i=this.generateMermaidCode(s),r=this.createCalloutFormat(t),o={callout:r,mermaid:s,rawMermaidCode:i,fullContent:this.generateFullContent(r,i)},l=Date.now()-n;return{success:!0,mermaidFormat:o,statistics:{nodesCount:e.nodes?.length||0,edgesCount:e.edges?.length||0,groupsCount:e.groups?.length||0,processingTime:l}}}catch(t){return{success:!1,error:`Conversion failed: ${t instanceof Error?t.message:String(t)}`,statistics:{nodesCount:e.nodes?.length||0,edgesCount:e.edges?.length||0,groupsCount:e.groups?.length||0,processingTime:Date.now()-n}}}}validateCanvasData(e){if(!e||!e.nodes||0===e.nodes.length)return!1;for(const t of e.nodes)if(!t.id||"string"!=typeof t.id)return!1;if(e.edges){const t=new Set(e.nodes.map(e=>e.id));for(const s of e.edges)if(!t.has(s.fromNode)||!t.has(s.toNode))return!1}return!0}generateMermaidFlowchart(e,t){return{direction:t?.direction||this.settings.flowchartDirection,nodes:e.nodes.map(e=>this.convertCanvasNodeToMermaidNode(e)),edges:(e.edges||[]).map(e=>this.convertCanvasEdgeToMermaidEdge(e)),subgraphs:(e.groups||[]).map(e=>this.convertCanvasGroupToMermaidSubgraph(e))}}convertCanvasNodeToMermaidNode(e){const t={id:this.sanitizeNodeId(e.id),label:this.getNodeLabel(e),type:this.getNodeType(e),style:this.getNodeStyle(e),class:this.getNodeClass(e)};return e.file&&(t.filePath=e.file),t}convertCanvasEdgeToMermaidEdge(e){return{fromId:this.sanitizeNodeId(e.fromNode),toId:this.sanitizeNodeId(e.toNode),label:e.label,style:this.getEdgeStyle(e),arrowStyle:e.toEnd,lineStyle:e.style}}convertCanvasGroupToMermaidSubgraph(e){return{id:this.sanitizeNodeId(e.id),label:e.label,nodes:e.children.map(e=>this.sanitizeNodeId(e)),parentId:e.parentId?this.sanitizeNodeId(e.parentId):void 0}}generateMermaidCode(e){let t=`flowchart ${e.direction}\n`;return t+=this.generateNodeDefinitions(e),t+=this.generateSubgraphStructure(e),t+=this.generateEdgeConnections(e),t+=this.generateFileNodeInternalLinks(e),t}generateNodeDefinitions(e){let t=`\n  ${a.MERMAID_FORMAT_SECTIONS.NODE_DEFINITIONS}\n`;for(const s of e.nodes){const e=this.getNodeDisplayLabel(s);t+=`${a.MERMAID_GENERATION_FORMAT.NODE_INDENT}${s.id}["${e}"]\n`}return t}generateSubgraphStructure(e){if(!e.subgraphs||0===e.subgraphs.length)return"";let t=`\n  ${a.MERMAID_FORMAT_SECTIONS.SUBGRAPH_STRUCTURE}\n`;const s=e.subgraphs.filter(e=>e.parentId),n=e.subgraphs.filter(e=>!e.parentId);for(const e of s)t+=this.generateSimpleSubgraph(e);for(const s of n)t+=this.generateParentSubgraph(s,e.subgraphs);return t}generateSimpleSubgraph(e){let t=`  subgraph ${e.id}["${e.label}"]\n`;for(const s of e.nodes)t+=`    ${s}\n`;return t+="  end\n",t}generateParentSubgraph(e,t){let s=`  subgraph ${e.id}["${e.label}"]\n`;for(const t of e.nodes)s+=`    ${t}\n`;const a=t.filter(t=>t.parentId===e.id);for(const e of a)s+=`    ${e.id}\n`;return s+="  end\n",s}generateEdgeConnections(e){if(!e.edges||0===e.edges.length)return"";let t=`\n  ${a.MERMAID_FORMAT_SECTIONS.EDGE_CONNECTIONS}\n`;for(const s of e.edges){let e=`${a.MERMAID_GENERATION_FORMAT.EDGE_INDENT}${s.fromId} --\x3e`;s.label&&(e+=`|${s.label}|`),e+=` ${s.toId}\n`,t+=e}return t}generateFileNodeInternalLinks(e){if(!this.settings.enableInternalLinks)return"";const t=this.getFileNodeIds(e);if(0===t.length)return"";let s=`\n  ${a.MERMAID_FORMAT_SECTIONS.FILE_INTERNAL_LINKS}\n`;return s+=`${a.MERMAID_GENERATION_FORMAT.CLASS_INDENT}class ${t.join(",")} internal-link\n`,s}createCalloutFormat(e){return{type:"quote",title:`[[${e}]]`,content:"",icon:void 0}}generateFullContent(e,t){let s=`> [!${e.type}] ${e.title}\n`;return e.icon&&(s=`> [!${e.type}|${e.icon}] ${e.title}\n`),s+="> \n",s+="> ```mermaid\n",s+=`> ${t.split("\n").join("\n> ")}\n`,s+="> ```\n",s}sanitizeNodeId(e){return e.replace(/[^a-zA-Z0-9_]/g,"_")}getNodeLabel(e){let t="";return t=e.text?e.text:e.label?e.label:e.file?this.getFileNameFromPath(e.file):`Node_${e.id}`,t.includes("\n")&&(t=t.split("\n").map((e,t)=>{if(0===t)return e;const s=e.trim();return s?`<br>  ${s}`:""}).filter(e=>""!==e).join("")),t}getNodeType(e){return e.file?"file":e.url?"link":"image"===e.type?"image":"text"}getNodeStyle(e){if(!this.settings.enableMermaidStyling)return"";let t="fill:#f9f9f9,stroke:#333,stroke-width:2px";return e.backgroundColor&&(t=t.replace(/fill:[^,]+/,`fill:${e.backgroundColor}`)),e.borderColor&&(t=t.replace(/stroke:[^,]+/,`stroke:${e.borderColor}`)),t}getNodeClass(e){return`canvas-node-${e.type}`}getEdgeStyle(e){if(!this.settings.enableMermaidStyling)return"";let t="stroke:#333,stroke-width:2px";return e.color&&(t=t.replace(/stroke:[^,]+/,`stroke:${e.color}`)),e.width&&(t=t.replace(/stroke-width:[^,]+/,`stroke-width:${e.width}px`)),t}getFileNameFromPath(e){const t=e.split("/");return t[t.length-1].replace(/\.[^/.]+$/,"")}generateInternalLink(e){return`[[${e}]]`}getNodeDisplayLabel(e){return e.filePath&&"file"===e.type?this.getFileNameFromPath(e.filePath):e.label}getFileNodeIds(e){const t=[];for(const s of e.nodes)s.filePath&&t.push(s.id);return t}}},579:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasDataRepository=void 0;const a=s(197);t.CanvasDataRepository=class{constructor(e){this.app=e}async exists(e){try{const t=(0,a.normalizePath)(e);return this.app.vault.getAbstractFileByPath(t)instanceof a.TFile}catch(e){return!1}}async getCanvasData(e){const t=(0,a.normalizePath)(e),s=this.app.vault.getAbstractFileByPath(t);if(!(s instanceof a.TFile))throw new Error(`Canvas file does not exist: ${t}`);const n=await this.app.vault.read(s),i=this.parseCanvasContent(n);if(!i)throw new Error("Canvas data parsing failed");return i}async getCanvasFileInfo(e){const t=(0,a.normalizePath)(e),s=this.app.vault.getAbstractFileByPath(t);if(!(s instanceof a.TFile))throw new Error(`Canvas file does not exist: ${t}`);const n=await this.app.vault.adapter.stat(t);if(!n)throw new Error(`Unable to get file status: ${t}`);return{fileName:s.basename,filePath:t,content:"",lastModified:new Date(n.mtime||Date.now())}}parseCanvasContent(e){try{const t=JSON.parse(e);if(!t||"object"!=typeof t)return null;const s=this.extractNodes(t),a=this.extractEdges(t),n=this.extractGroupsFromNodes(s);return{nodes:s,edges:a,groups:this.processGroupNesting(n,s)}}catch(e){return null}}extractNodes(e){const t=[];if(e.nodes&&Array.isArray(e.nodes))for(const s of e.nodes)if(s&&"object"==typeof s&&s.id){const e={id:s.id,type:s.type||"text",text:s.text||"",label:s.label||"",x:s.x||0,y:s.y||0,width:s.width||100,height:s.height||100,backgroundColor:s.backgroundColor,borderColor:s.borderColor,file:s.file,url:s.url};t.push(e)}return t}extractEdges(e){const t=[];if(e.edges&&Array.isArray(e.edges))for(const s of e.edges)if(s&&"object"==typeof s&&s.id){const e={id:s.id,fromNode:s.fromNode||s.from,toNode:s.toNode||s.to,label:s.label||"",color:s.color,width:s.width,style:s.style,toEnd:s.toEnd};t.push(e)}return t}extractGroupsFromNodes(e){const t=[];for(const s of e)if("group"===s.type){const e={id:s.id,label:s.label||s.text||`Group_${s.id}`,x:s.x||0,y:s.y||0,width:s.width||200,height:s.height||150,children:[],parentId:void 0};t.push(e)}return t}processGroupNesting(e,t){if(0===e.length)return e;for(const s of e)s.children=this.findNodesInGroup(s,t);for(let t=0;t<e.length;t++)for(let s=0;s<e.length;s++)if(t!==s&&this.isGroupInGroup(e[t],e[s])){e[t].parentId=e[s].id;break}return e}calculateNodeBounds(e){return{left:e.x||0,right:(e.x||0)+(e.width||100),top:e.y||0,bottom:(e.y||0)+(e.height||100)}}isNodeInGroup(e,t){const s=this.calculateNodeBounds(e),a=this.calculateNodeBounds(t);return s.left>=a.left&&s.right<=a.right&&s.top>=a.top&&s.bottom<=a.bottom}findNodesInGroup(e,t){const s=[];for(const a of t)"group"!==a.type&&this.isNodeInGroup(a,e)&&s.push(a.id);return s}isGroupInGroup(e,t){const s=this.calculateNodeBounds(e),a=this.calculateNodeBounds(t);return s.left>=a.left&&s.right<=a.right&&s.top>=a.top&&s.bottom<=a.bottom}}},649:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RefreshCanvasCalloutsUseCase=void 0,t.RefreshCanvasCalloutsUseCase=class{constructor(e,t,s,a){this.fileRepository=e,this.canvasRepository=t,this.settings=s,this.convertCanvasUseCase=a}async execute(e){try{const t=await this.getCanvasData(e);if(!t)return{success:!1,message:"Unable to get Canvas data",updatedFiles:[]};const s=await this.locateCanvasCallouts(e);if(0===s.length)return{success:!1,message:"No Callout files containing Canvas backlinks found",updatedFiles:[]};const a=await this.updateCalloutFiles(s,t,e);return{success:!0,message:`Successfully updated ${a.successfulUpdates.length} files`,updatedFiles:a.successfulUpdates}}catch(e){return{success:!1,message:`Operation failed: ${e instanceof Error?e.message:String(e)}`,updatedFiles:[]}}}async getCanvasData(e){try{if(e.canvasFilePath)return await this.canvasRepository.getCanvasData(e.canvasFilePath);if(e.canvasFileName&&e.app)try{const t=e.app.vault.getFiles().find(t=>"canvas"===t.extension&&t.name===e.canvasFileName);if(t)return await this.canvasRepository.getCanvasData(t.path)}catch(e){}return null}catch(e){return null}}async locateCanvasCallouts(e){try{if(!e.app)return[];const t=e.canvasFilePath||e.canvasFileName;if(!t)return[];const s=await this.findFilesByObsidianBacklinks(e.app,t);if(0===s.length)return[];const a=[];for(const t of s)try{const s=await this.validateCanvasCalloutFile(t,e.canvasFileName);s.hasCanvasCallout&&a.push(s)}catch(e){}return a}catch(e){return[]}}async findFilesByObsidianBacklinks(e,t){try{const s=e.vault.getAbstractFileByPath(t);if(!s){try{e.vault.getFiles().filter(e=>"canvas"===e.extension)}catch(e){}return[]}const a=e.metadataCache.getBacklinksForFile(s);if(!a)return[];let n=null;if(a.data&&a.data instanceof Map)n=a.data;else{if(!a.backlinks)return[];n=a.backlinks}return this.extractFilesFromBacklinksData(n,e,"backlinks")}catch(e){return[]}}extractFilesFromBacklinksData(e,t,s){const a=[];if(e instanceof Map)for(const[t,s]of e.entries())t&&"string"==typeof t&&a.push(t);else if("object"==typeof e&&null!==e)for(const t in e)e.hasOwnProperty(t)&&t&&"string"==typeof t&&a.push(t);return a}async validateCanvasCalloutFile(e,t){const s=await this.fileRepository.readFile(e),a=this.escapeRegExp(t),n=new RegExp(`\\[\\[${a}\\]\\]`,"gi"),i=s.match(n)||[],r=new RegExp("> \\[!quote\\] \\[\\["+a+"\\]\\]\\s*\\n> \\s*\\n> \\`\\`\\`mermaid\\s*\\n([\\s\\S]*?)\\`\\`\\`\\s*\\n","gi"),o=s.match(r)||[];return{filePath:e,content:s,hasCanvasCallout:o.length>0,calloutMatches:o,canvasBacklinks:i,calloutMermaidPattern:r}}async updateCalloutFiles(e,t,s){const a=[],n=[];for(const i of e)try{const e=await this.generateNewMermaidContent(t,s);(await this.updateFileContent(i,e)).success?a.push(i.filePath):n.push(i.filePath)}catch(e){n.push(i.filePath)}return{successfulUpdates:a,failedUpdates:n}}async generateNewMermaidContent(e,t){const s=await this.convertCanvasUseCase.execute(e,t.canvasFileName,t.canvasFilePath||t.canvasFileName);if(s.success&&s.mermaidFormat)return this.extractMermaidCodeFromCallout(s.mermaidFormat.fullContent);throw new Error("Failed to generate Mermaid content")}extractMermaidCodeFromCallout(e){const t=e.match(/```mermaid\s*([\s\S]*?)```/);return t?t[1].trim():""}async updateFileContent(e,t){try{const s=e.content,a=this.replaceCalloutMermaidInContent(s,e,t);return await this.fileRepository.writeFile(e.filePath,a),{success:!0,message:"File updated successfully"}}catch(e){return{success:!1,message:`Update failed: ${e instanceof Error?e.message:String(e)}`}}}generateNewCalloutContent(e,t){let s=`> [!quote] ${e.canvasBacklinks[0]||""}\n`;return s+="> \n",s+="> ```mermaid\n",s+=t,s+="```\n\n",s}replaceCalloutMermaidInContent(e,t,s){if(t.calloutMatches.length>0){const a=this.generateNewCalloutContent(t,s);return e.replace(t.calloutMermaidPattern,a)}return e+"\n"+this.generateNewCalloutContent(t,s)}escapeRegExp(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}}},714:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ConvertCanvasToMermaidCommand=void 0;const a=s(197);t.ConvertCanvasToMermaidCommand=class{constructor(e,t,s,a,n){this.app=e,this.settings=t,this.convertToMermaidUseCase=s,this.canvasRepository=a,this.clipboardRepository=n}updateSettings(e){this.settings=e,this.convertToMermaidUseCase.updateSettings(e)}async execute(e,t){try{const e=await this.getActiveCanvasFile();if(!e)return new a.Notice("No Canvas file found. Please open a Canvas file first."),{success:!1,message:"No active Canvas file found",error:"Please ensure a Canvas file is currently open"};const t=await this.canvasRepository.getCanvasData(e.path);if(!t?.nodes?.length)return new a.Notice("Canvas is empty or invalid."),{success:!1,message:"Canvas data is invalid or empty",error:"Canvas file does not contain valid node data"};const s=await this.convertToMermaidUseCase.execute(t,e.name,e.path);if(!s.success||!s.mermaidFormat)return new a.Notice("Failed to convert Canvas to Mermaid."),{success:!1,message:"Canvas conversion failed",error:s.error||"Unknown error occurred during conversion"};const n=await this.copyToClipboard(s.mermaidFormat);if(!n.success)return new a.Notice("Failed to copy to clipboard."),{success:!1,message:"Failed to copy to clipboard",error:n.message};const i=this.generateSuccessMessage(s);return new a.Notice(i),{success:!0,message:"Canvas successfully converted to Mermaid format and copied to clipboard",clipboardContent:s.mermaidFormat.fullContent}}catch(e){return new a.Notice("Failed to convert Canvas to Mermaid."),{success:!1,message:"Command execution failed",error:e instanceof Error?e.message:String(e)}}}async getActiveCanvasFile(){const e=this.app.workspace.getActiveFile();return e?"canvas"===e.extension?e:(await this.findCanvasFilesInCurrentDirectory())[0]||null:null}async findCanvasFilesInCurrentDirectory(){const e=this.app.workspace.getActiveFile();if(!e)return[];const t=e.parent?.path||"";return this.app.vault.getFiles().filter(e=>"canvas"===e.extension&&e.parent?.path===t)}async copyToClipboard(e){try{const t={text:e.fullContent,format:"text"},s=await this.clipboardRepository.writeToClipboard(t);return s.success?{success:!0}:{success:!1,message:s.message}}catch(e){return{success:!1,message:e instanceof Error?e.message:String(e)}}}generateSuccessMessage(e){const t=e.statistics;return t?`Canvas converted! Nodes: ${t.nodesCount}, Edges: ${t.edgesCount}, Groups: ${t.groupsCount}`:"Canvas converted and copied to clipboard!"}}},849:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RefreshCanvasCalloutsCommand=void 0;const a=s(197);t.RefreshCanvasCalloutsCommand=class{constructor(e,t,s,a,n){this.app=e,this.settings=t,this.refreshCanvasCalloutsUseCase=s,this.canvasRepository=a,this.fileRepository=n}updateSettings(e){this.settings=e}async execute(e,t){try{const e=await this.getActiveCanvasFile();if(!e)return new a.Notice("No Canvas file found. Please open a Canvas file first."),{success:!1,message:"No active Canvas file found",error:"Please ensure a Canvas file is currently open"};const t=await this.canvasRepository.getCanvasData(e.path);if(!t?.nodes?.length)return new a.Notice("Canvas is empty or invalid."),{success:!1,message:"Canvas data is invalid or empty",error:"Canvas file does not contain valid node data"};const s={canvasFileName:e.name,canvasFilePath:e.path,canvasData:t,updateAllCallouts:!0,app:this.app},n=await this.refreshCanvasCalloutsUseCase.execute(s);if(!n.success)return new a.Notice("Failed to refresh Canvas Callouts."),{success:!1,message:"Failed to refresh Canvas Callouts",error:n.message||"Unknown error occurred during refresh"};const i=this.generateResultMessage(n);return new a.Notice(i),{success:!0,message:n.message||"Refresh completed",updatedFilesCount:n.updatedFiles?.length||0,updatedFiles:n.updatedFiles||[]}}catch(e){return new a.Notice("Failed to refresh Canvas Callouts."),{success:!1,message:"Command execution failed",error:e instanceof Error?e.message:String(e)}}}async getActiveCanvasFile(){const e=this.app.workspace.getActiveFile();if(!e)return null;if("canvas"===e.extension)return e;const t=await this.findCanvasFilesInCurrentDirectory();return t.length>0?t[0]:(await this.findAllCanvasFiles())[0]||null}async findCanvasFilesInCurrentDirectory(){const e=this.app.workspace.getActiveFile();if(!e)return[];const t=e.parent?.path||"";return this.app.vault.getFiles().filter(e=>"canvas"===e.extension&&e.parent?.path===t)}async findAllCanvasFiles(){return this.app.vault.getFiles().filter(e=>"canvas"===e.extension)}generateResultMessage(e){const t=e.statistics;return t?t.filesUpdated>0?`Refresh completed! Found ${t.totalFilesFound} files, updated ${t.filesUpdated}`:"No files found that need updating":e.updatedFiles?.length>0?`Updated ${e.updatedFiles.length} Callout files`:"No Callout files found that need updating"}}},877:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Canvas2MermaidSettingTab=void 0;const a=s(197);class n extends a.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){const{containerEl:e}=this;e.empty(),new a.Setting(e).setName("Canvas2Mermaid").setHeading(),this.createMermaidStyleSettings(e),this.createInternalLinkSettings(e),this.createActionButtons(e)}createMermaidStyleSettings(e){const t=e.createEl("div",{cls:"setting-section"});new a.Setting(t).setName("Diagram Style").setHeading(),new a.Setting(t).setName("Enable Mermaid Styling").setDesc("Enable Mermaid node styling").addToggle(e=>e.setValue(this.plugin.settings.enableMermaidStyling).onChange(async e=>{this.plugin.settings.enableMermaidStyling=e,await this.plugin.saveData(this.plugin.settings)})),new a.Setting(t).setName("Flowchart Direction").setDesc("Set the direction for Mermaid flowcharts").addDropdown(e=>e.addOption("TB","Top to Bottom").addOption("BT","Bottom to Top").addOption("RL","Right to Left").addOption("LR","Left to Right").setValue(this.plugin.settings.flowchartDirection).onChange(async e=>{this.plugin.settings.flowchartDirection=e,await this.plugin.saveData(this.plugin.settings)}))}createInternalLinkSettings(e){const t=e.createEl("div",{cls:"setting-section"});new a.Setting(t).setName("Links").setHeading(),new a.Setting(t).setName("Enable Internal Links").setDesc("Enable internal links in Mermaid nodes").addToggle(e=>e.setValue(this.plugin.settings.enableInternalLinks).onChange(async e=>{this.plugin.settings.enableInternalLinks=e,await this.plugin.saveData(this.plugin.settings)}))}createActionButtons(e){const t=e.createEl("div",{cls:"setting-section"});new a.Setting(t).setName("Reset").setHeading(),new a.Setting(t).setName("Reset to Defaults").setDesc("Reset all settings to default values").addButton(e=>e.setButtonText("Reset").onClick(async()=>{this.plugin.resetSettings(),this.display()}))}}t.Canvas2MermaidSettingTab=n},885:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FileRepository=void 0;const a=s(197);t.FileRepository=class{constructor(e){this.app=e}async exists(e){try{const t=(0,a.normalizePath)(e);return this.app.vault.getAbstractFileByPath(t)instanceof a.TFile}catch(e){return!1}}async readFile(e){const t=(0,a.normalizePath)(e),s=this.app.vault.getAbstractFileByPath(t);if(!(s instanceof a.TFile))throw new Error(`File does not exist: ${t}`);return await this.app.vault.read(s)}async writeFile(e,t){const s=(0,a.normalizePath)(e),n=this.app.vault.getAbstractFileByPath(s);if(!(n instanceof a.TFile))throw new Error(`File does not exist: ${s}`);await this.app.vault.modify(n,t)}async getFileInfo(e){const t=(0,a.normalizePath)(e),s=this.app.vault.getAbstractFileByPath(t);if(!(s instanceof a.TFile))throw new Error(`File does not exist: ${t}`);const n=await this.app.vault.adapter.stat(t);if(!n)throw new Error(`Unable to get file status: ${t}`);return{path:t,name:s.name,size:n.size||0,lastModified:new Date(n.mtime||Date.now())}}async updateCalloutMermaidContent(e,t,s){try{const n=(0,a.normalizePath)(e),i=await this.readFile(n);if(!i.includes(t))return{success:!1,message:"Content to replace not found"};const r=i.replace(t,s);return await this.writeFile(n,r),{success:!0,message:"File content updated successfully"}}catch(e){return{success:!1,message:`Update failed: ${e instanceof Error?e.message:String(e)}`}}}}},948:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_SETTINGS=void 0,t.DEFAULT_SETTINGS={enableMermaidStyling:!0,enableInternalLinks:!0,flowchartDirection:"TB"}},997:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MERMAID_GENERATION_FORMAT=t.MERMAID_FORMAT_SECTIONS=t.MERMAID_TEMPLATES=t.MERMAID_ICONS=t.MERMAID_STYLES=t.MERMAID_CALLOUT_TYPES=t.MERMAID_NODE_TYPES=t.MERMAID_DIRECTIONS=void 0,t.MERMAID_DIRECTIONS={TB:"TB",BT:"BT",RL:"RL",LR:"LR"},t.MERMAID_NODE_TYPES={TEXT:"text",FILE:"file",LINK:"link",IMAGE:"image"},t.MERMAID_CALLOUT_TYPES={QUOTE:"quote",NOTE:"note",WARNING:"warning",ERROR:"error",SUCCESS:"success",INFO:"info"},t.MERMAID_STYLES={DEFAULT_NODE:"fill:#f9f9f9,stroke:#333,stroke-width:2px",DEFAULT_EDGE:"stroke:#333,stroke-width:2px",DEFAULT_SUBGRAPH:"fill:#f0f0f0,stroke:#666,stroke-width:1px",HIGHLIGHTED_NODE:"fill:#fff3cd,stroke:#ffc107,stroke-width:3px",ERROR_NODE:"fill:#f8d7da,stroke:#dc3545,stroke-width:2px",SUCCESS_NODE:"fill:#d4edda,stroke:#28a745,stroke-width:2px"},t.MERMAID_ICONS={QUOTE:"💬",NOTE:"📝",WARNING:"⚠️",ERROR:"❌",SUCCESS:"✅",INFO:"ℹ️"},t.MERMAID_TEMPLATES={FLOWCHART_START:"flowchart",SUBGRAPH_START:"subgraph",SUBGRAPH_END:"end",NODE_DEFINITION:'  {id}["{label}"]',EDGE_DEFINITION:"  {fromId} --\x3e {toId}",EDGE_WITH_LABEL:"  {fromId} --\x3e|{label}| {toId}"},t.MERMAID_FORMAT_SECTIONS={NODE_DEFINITIONS:"%% Node Definitions",SUBGRAPH_STRUCTURE:"%% Group Structure",EDGE_CONNECTIONS:"%% Edge Connections",FILE_INTERNAL_LINKS:"%% File Node Internal Links"},t.MERMAID_GENERATION_FORMAT={SECTION_SEPARATOR:"\n",INDENT_BASE:"  ",SUBGRAPH_INDENT:"  ",NODE_INDENT:"  ",EDGE_INDENT:"  ",CLASS_INDENT:"  "}}},t={};function s(a){var n=t[a];if(void 0!==n)return n.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,s),i.exports}var a={};(()=>{var e=a;Object.defineProperty(e,"__esModule",{value:!0});const t=s(197),n=s(948),i=s(422),r=s(649),o=s(579),l=s(885),c=s(317),d=s(714),u=s(849),h=s(877);class p extends t.Plugin{constructor(){super(...arguments),this.settings={...n.DEFAULT_SETTINGS}}async onload(){await this.loadSettings(),this.initializeRepositories(),this.initializeUseCases(),this.initializeCommands(),this.registerCommands(),this.initializeSettingTab()}async onunload(){await this.saveSettings()}async loadSettings(){const e=await this.loadData();this.settings=Object.assign({},n.DEFAULT_SETTINGS,e)}async saveSettings(){await this.saveData(this.settings)}initializeRepositories(){this.canvasRepository=new o.CanvasDataRepository(this.app),this.fileRepository=new l.FileRepository(this.app),this.clipboardRepository=new c.ClipboardRepository}initializeUseCases(){this.convertToMermaidUseCase=new i.ConvertCanvasToMermaidUseCase(this.settings,this.canvasRepository),this.refreshCanvasCalloutsUseCase=new r.RefreshCanvasCalloutsUseCase(this.fileRepository,this.canvasRepository,this.settings,this.convertToMermaidUseCase)}initializeCommands(){this.convertCanvasCommand=new d.ConvertCanvasToMermaidCommand(this.app,this.settings,this.convertToMermaidUseCase,this.canvasRepository,this.clipboardRepository),this.refreshCalloutsCommand=new u.RefreshCanvasCalloutsCommand(this.app,this.settings,this.refreshCanvasCalloutsUseCase,this.canvasRepository,this.fileRepository)}registerCommands(){this.addCommand({id:"convert-canvas-to-mermaid",name:"Convert Canvas to Mermaid Flowchart",callback:async()=>{const e=this.app.workspace.getActiveViewOfType(t.MarkdownView);e?await this.convertCanvasCommand.execute(e.editor,e):await this.convertCanvasCommand.execute(void 0,void 0)}}),this.addCommand({id:"refresh-canvas-callouts",name:"Refresh Canvas Callouts",callback:async()=>{const e=this.app.workspace.getActiveViewOfType(t.MarkdownView);e?await this.refreshCalloutsCommand.execute(e.editor,e):await this.refreshCalloutsCommand.execute(void 0,void 0)}})}initializeSettingTab(){this.settingTab=new h.Canvas2MermaidSettingTab(this.app,this),this.addSettingTab(this.settingTab)}async updateSettings(e){this.settings={...this.settings,...e},this.convertToMermaidUseCase.updateSettings(this.settings),this.convertCanvasCommand.updateSettings(this.settings),this.refreshCalloutsCommand.updateSettings(this.settings),await this.saveSettings()}getSettings(){return{...this.settings}}resetSettings(){this.settings={...n.DEFAULT_SETTINGS},this.saveData(this.settings)}}e.default=p})(),module.exports=a})();